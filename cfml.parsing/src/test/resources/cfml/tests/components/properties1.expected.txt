/*===TOKENS===*/
ML_COMMENT               </**
* @author 
*/>
COMPONENT                <component>
IDENTIFIER               <accessors>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <true>
CLOSE_STRING             <">
'{'                      <{>
LINE_COMMENT             <// The first name of the User
>
PROPERTY                 <property>
IDENTIFIER               <type>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <string>
CLOSE_STRING             <">
IDENTIFIER               <name>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <firstName>
CLOSE_STRING             <">
';'                      <;>
LINE_COMMENT             <// Last name of the User
>
PROPERTY                 <property>
IDENTIFIER               <name>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <lastName>
CLOSE_STRING             <">
';'                      <;>
ML_COMMENT               </**
  * Constructor
  */>
FUNCTION                 <function>
IDENTIFIER               <init>
'('                      <(>
')'                      <)>
'{'                      <{>
RETURN                   <return>
IDENTIFIER               <this>
';'                      <;>
'}'                      <}>
ML_COMMENT               </**
  * Submit an order
  * @product.hint The product object
  * @coupon.hint The Coupon code needed
  * @results.hint The results object
  */>
FUNCTION                 <function>
IDENTIFIER               <submitOrder>
'('                      <(>
REQUIRED                 <required>
IDENTIFIER               <product>
','                      <,>
IDENTIFIER               <coupon>
'='                      <=>
OPEN_STRING              <">
CLOSE_STRING             <">
','                      <,>
BOOLEAN                  <boolean>
IDENTIFIER               <results>
'='                      <=>
BOOLEAN_LITERAL          <true>
')'                      <)>
'{'                      <{>
'}'                      <}>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentAttribute
      (identifier accessors)
      =
      (startExpression
        (compareExpression
          (baseExpression
            (unaryExpression
              (primaryExpression
                (literalExpression (stringLiteral " (stringLiteralPart true) "))
              )
            )
          )
        )
      )
    )
    (componentGuts
      {
      (element
        (statement
          (tagOperatorStatement
            (propertyStatement
              property
              (paramStatementAttributes
                (param
                  (identifier type)
                  =
                  (startExpression
                    (compareExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart string) "))
                          )
                        )
                      )
                    )
                  )
                )
                (param
                  (identifier name)
                  =
                  (startExpression
                    (compareExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart firstName) "))
                          )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
          )
        )
      )
      (element
        (statement
          (tagOperatorStatement
            (propertyStatement
              property
              (paramStatementAttributes
                (param
                  (identifier name)
                  =
                  (startExpression
                    (compareExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart lastName) "))
                          )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
          )
        )
      )
      (element
        (functionDeclaration
          function
          (identifier init)
          (
          parameterList
          )
          (compoundStatement
            {
            (statement
              (returnStatement
                return
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (memberExpression (identifier this))))
                  )
                )
                ;
              )
            )
            }
          )
        )
      )
      (element
        (functionDeclaration
          function
          (identifier submitOrder)
          (
          (parameterList
            (parameter required (identifier product))
            ,
            (parameter
              (identifier coupon)
              =
              (startExpression
                (compareExpression
                  (baseExpression
                    (unaryExpression (primaryExpression (literalExpression (stringLiteral " "))))
                  )
                )
              )
            )
            ,
            (parameter
              (parameterType (typeSpec (type boolean)))
              (identifier results)
              =
              (startExpression
                (compareExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression true))))
                )
              )
            )
          )
          )
          (compoundStatement { })
        )
      )
      }
    )
  )
)
/*======*/