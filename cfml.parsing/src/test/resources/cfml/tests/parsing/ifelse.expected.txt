/*===TOKENS===*/
IF                       <if>
'('                      <(>
IDENTIFIER               <isDefined>
'('                      <(>
OPEN_STRING              <">
STRING_LITERAL           <c>
CLOSE_STRING             <">
')'                      <)>
'&&'                     <&&>
IDENTIFIER               <d>
EQ                       <==>
OPEN_STRING              <">
STRING_LITERAL           <registration>
CLOSE_STRING             <">
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IDENTIFIER               <b>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <e.f>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
ELSE                     <else>
IF                       <if>
'('                      <(>
IDENTIFIER               <structKeyExists>
'('                      <(>
IDENTIFIER               <variables>
','                      <,>
OPEN_STRING              <'>
STRING_LITERAL           <g>
CLOSE_STRING             <'>
')'                      <)>
'&&'                     <&&>
IDENTIFIER               <variables>
'.'                      <.>
IDENTIFIER               <g>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IDENTIFIER               <b>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <y.j>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
ELSE                     <else>
IF                       <if>
'('                      <(>
IDENTIFIER               <session>
'.'                      <.>
IDENTIFIER               <sf>
'.'                      <.>
IDENTIFIER               <get>
'('                      <(>
OPEN_STRING              <'>
STRING_LITERAL           <n.m>
CLOSE_STRING             <'>
')'                      <)>
EQ                       <==>
OPEN_STRING              <">
STRING_LITERAL           <p>
CLOSE_STRING             <">
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IDENTIFIER               <b>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <l.k>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (element
    (statement
      (ifStatement
        if
        (condition
          (
          (compareExpression
            (baseExpression
              (unaryExpression
                (memberExpression
                  (functionCall
                    (identifier isDefined)
                    (
                    (argumentList
                      (argument
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (primaryExpression
                                  (literalExpression (stringLiteral " (stringLiteralPart c) "))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    )
                  )
                )
              )
            )
            (compareExpressionOperator &&)
            (compareExpression
              (baseExpression (unaryExpression (memberExpression (identifier d))))
              (compareExpressionOperator ==)
              (compareExpression
                (baseExpression
                  (unaryExpression
                    (primaryExpression
                      (literalExpression (stringLiteral " (stringLiteralPart registration) "))
                    )
                  )
                )
              )
            )
          )
          )
        )
        (statement
          (compoundStatement
            {
            (statement
              (assignmentExpression
                (startExpression
                  (compareExpression
                    (baseExpression (unaryExpression (memberExpression (identifier b))))
                  )
                )
                =
                (startExpression
                  (compareExpression
                    (baseExpression
                      (unaryExpression
                        (primaryExpression
                          (literalExpression (stringLiteral " (stringLiteralPart e.f) "))
                        )
                      )
                    )
                  )
                )
              )
              (endOfStatement ;)
            )
            }
          )
        )
        else
        (statement
          (ifStatement
            if
            (condition
              (
              (compareExpression
                (baseExpression
                  (unaryExpression
                    (memberExpression
                      (functionCall
                        (identifier structKeyExists)
                        (
                        (argumentList
                          (argument
                            (startExpression
                              (compareExpression
                                (baseExpression (unaryExpression (memberExpression (identifier variables))))
                              )
                            )
                          )
                          ,
                          (argument
                            (startExpression
                              (compareExpression
                                (baseExpression
                                  (unaryExpression
                                    (primaryExpression
                                      (literalExpression (stringLiteral ' (stringLiteralPart g) '))
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                        )
                      )
                    )
                  )
                )
                (compareExpressionOperator &&)
                (compareExpression
                  (baseExpression
                    (unaryExpression (memberExpression (identifier variables) . (identifier g)))
                  )
                )
              )
              )
            )
            (statement
              (compoundStatement
                {
                (statement
                  (assignmentExpression
                    (startExpression
                      (compareExpression
                        (baseExpression (unaryExpression (memberExpression (identifier b))))
                      )
                    )
                    =
                    (startExpression
                      (compareExpression
                        (baseExpression
                          (unaryExpression
                            (primaryExpression
                              (literalExpression (stringLiteral " (stringLiteralPart y.j) "))
                            )
                          )
                        )
                      )
                    )
                  )
                  (endOfStatement ;)
                )
                }
              )
            )
            else
            (statement
              (ifStatement
                if
                (condition
                  (
                  (compareExpression
                    (baseExpression
                      (unaryExpression
                        (memberExpression
                          (identifier session)
                          .
                          (identifier sf)
                          .
                          (qualifiedFunctionCall
                            (identifier get)
                            (
                            (argumentList
                              (argument
                                (startExpression
                                  (compareExpression
                                    (baseExpression
                                      (unaryExpression
                                        (primaryExpression
                                          (literalExpression (stringLiteral ' (stringLiteralPart n.m) '))
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                            )
                          )
                        )
                      )
                    )
                    (compareExpressionOperator ==)
                    (compareExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart p) "))
                          )
                        )
                      )
                    )
                  )
                  )
                )
                (statement
                  (compoundStatement
                    {
                    (statement
                      (assignmentExpression
                        (startExpression
                          (compareExpression
                            (baseExpression (unaryExpression (memberExpression (identifier b))))
                          )
                        )
                        =
                        (startExpression
                          (compareExpression
                            (baseExpression
                              (unaryExpression
                                (primaryExpression
                                  (literalExpression (stringLiteral " (stringLiteralPart l.k) "))
                                )
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    }
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
/*======*/
/*===DECOMPILE===*/
if(isDefined('c') && d == 'registration' )   {
b = 'e.f';

  }
else   if(structKeyExists(variables, 'g') && variables.g )     {
b = 'y.j';

    }
  else     if(session.sf.get('n.m') == 'p' )       {
b = 'l.k';

      }
/*======*/