/*===TOKENS===*/
IDENTIFIER               <securityNumber>
'='                      <=>
IDENTIFIER               <securityStruct>
'['                      <[>
OPEN_STRING              <'>
STRING_LITERAL           <Joe>
CLOSE_STRING             <'>
']'                      <]>
'?'                      <?>
':'                      <:>
'-'                      <->
INTEGER_LITERAL          <1>
';'                      <;>
Hidden:LINE_COMMENT             <// Retrieving from a struct>
IDENTIFIER               <colourCode>
'='                      <=>
IDENTIFIER               <colourArray>
'['                      <[>
INDEX                    <index>
']'                      <]>
'?'                      <?>
':'                      <:>
OPEN_STRING              <">
STRING_LITERAL           <black>
CLOSE_STRING             <">
';'                      <;>
Hidden:LINE_COMMENT             <// Retrieving from an array>
IDENTIFIER               <employeeName>
'='                      <=>
IDENTIFIER               <getEmployeeName>
'('                      <(>
IDENTIFIER               <ID>
')'                      <)>
'?'                      <?>
':'                      <:>
OPEN_STRING              <">
STRING_LITERAL           <Joe>
CLOSE_STRING             <">
';'                      <;>
Hidden:LINE_COMMENT             <// A function call>
/*===TREE===*/
(scriptBlock
  (element
    (statement
      (assignmentExpression
        (startExpression
          (baseExpression
            (unaryExpression (memberExpression (identifier securityNumber)))
          )
        )
        =
        (startExpression
          (baseExpression
            (baseExpression
              (unaryExpression
                (memberExpression
                  (identifier securityStruct)
                  (arrayMemberExpression
                    [
                    (startExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral ' (stringLiteralPart Joe) '))
                          )
                        )
                      )
                    )
                    ]
                  )
                )
              )
            )
            (elvisOperator ? :)
            (baseExpression
              -
              (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
            )
          )
        )
      )
      (endOfStatement ;)
    )
  )
  (element
    (statement
      (assignmentExpression
        (startExpression
          (baseExpression (unaryExpression (memberExpression (identifier colourCode))))
        )
        =
        (startExpression
          (baseExpression
            (baseExpression
              (unaryExpression
                (memberExpression
                  (identifier colourArray)
                  (arrayMemberExpression
                    [
                    (startExpression
                      (baseExpression
                        (unaryExpression (memberExpression (identifier (cfmlFunction index))))
                      )
                    )
                    ]
                  )
                )
              )
            )
            (elvisOperator ? :)
            (baseExpression
              (unaryExpression
                (primaryExpression
                  (literalExpression (stringLiteral " (stringLiteralPart black) "))
                )
              )
            )
          )
        )
      )
      (endOfStatement ;)
    )
  )
  (element
    (statement
      (assignmentExpression
        (startExpression
          (baseExpression (unaryExpression (memberExpression (identifier employeeName))))
        )
        =
        (startExpression
          (baseExpression
            (baseExpression
              (unaryExpression
                (memberExpression
                  (functionCall
                    (identifier getEmployeeName)
                    (
                    (argumentList
                      (argument
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier ID))))
                        )
                      )
                    )
                    )
                  )
                )
              )
            )
            (elvisOperator ? :)
            (baseExpression
              (unaryExpression
                (primaryExpression
                  (literalExpression (stringLiteral " (stringLiteralPart Joe) "))
                )
              )
            )
          )
        )
      )
      (endOfStatement ;)
    )
  )
)
/*======*/
/*===DECOMPILE===*/
{
securityNumber = securityStruct['Joe'] ?: -1;
colourCode = colourArray[index] ?: 'black';
employeeName = getEmployeeName(ID) ?: 'Joe';

}
/*======*/