/*===TOKENS===*/
Hidden:NEWLINE                  <>
COMPONENT                <component>
'{'                      <{>
Hidden:NEWLINE                  <>
PUBLIC                   <public>
IDENTIFIER               <void>
FUNCTION                 <function>
IDENTIFIER               <test>
'('                      <(>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
PARAM                    <param>
STRING                   <string>
IDENTIFIER               <parse_error>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <but works>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
PARAM                    <param>
IDENTIFIER               <type>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <string>
CLOSE_STRING             <">
IDENTIFIER               <name>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <parses_fine>
CLOSE_STRING             <">
DEFAULT                  <default>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <works as expected>
CLOSE_STRING             <">
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <writeDump>
'('                      <(>
IDENTIFIER               <parse_error>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <writeDump>
'('                      <(>
IDENTIFIER               <parses_fine>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentGuts
      {
      (element
        (functionDeclaration
          (accessType public)
          (typeSpec (multipartIdentifier (identifier void)))
          function
          (identifier test)
          (
          parameterList
          )
          (compoundStatement
            {
            (statement
              (tagOperatorStatement
                (paramStatement
                  param
                  (paramExpression
                    (type string)
                    (multipartIdentifier (identifier parse_error))
                    =
                    (startExpression
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart but works) "))
                          )
                        )
                      )
                    )
                  )
                  ;
                )
              )
            )
            (statement
              (tagOperatorStatement
                (paramStatement
                  param
                  (paramStatementAttributes
                    (param
                      (multipartIdentifier (identifier type))
                      =
                      (startExpression
                        (baseExpression
                          (unaryExpression
                            (primaryExpression
                              (literalExpression (stringLiteral " (stringLiteralPart string) "))
                            )
                          )
                        )
                      )
                    )
                    (param
                      (multipartIdentifier (identifier name))
                      =
                      (startExpression
                        (baseExpression
                          (unaryExpression
                            (primaryExpression
                              (literalExpression (stringLiteral " (stringLiteralPart parses_fine) "))
                            )
                          )
                        )
                      )
                    )
                    (param
                      (multipartIdentifier (identifier default))
                      =
                      (startExpression
                        (baseExpression
                          (unaryExpression
                            (primaryExpression
                              (literalExpression (stringLiteral " (stringLiteralPart works as expected) "))
                            )
                          )
                        )
                      )
                    )
                  )
                  ;
                )
              )
            )
            (statement
              (startExpression
                (baseExpression
                  (unaryExpression
                    (memberExpression
                      (functionCall
                        (identifier writeDump)
                        (
                        (argumentList
                          (argument
                            (startExpression
                              (baseExpression (unaryExpression (memberExpression (identifier parse_error))))
                            )
                          )
                        )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
            (statement
              (startExpression
                (baseExpression
                  (unaryExpression
                    (memberExpression
                      (functionCall
                        (identifier writeDump)
                        (
                        (argumentList
                          (argument
                            (startExpression
                              (baseExpression (unaryExpression (memberExpression (identifier parses_fine))))
                            )
                          )
                        )
                        )
                      )
                    )
                  )
                )
              )
              ;
            )
            }
          )
        )
      )
      }
    )
  )
)
/*======*/
/*===DECOMPILE===*/
component {
  public void function test()     {
param;
param default='works as expected' name='parses_fine' type='string';
writeDump(parse_error);
writeDump(parses_fine);

    }
}
/*======*/